generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model company {
  id               String             @id @db.VarChar(36)
  name             String             @db.VarChar(128)
  street           String             @db.VarChar(128)
  district         String             @db.VarChar(64)
  subdistrict      String             @db.VarChar(64)
  city             String             @db.VarChar(64)
  province         String             @db.VarChar(64)
  postal_code      Int
  company_logo     String?            @db.VarChar(48)
  phone_number     String             @db.VarChar(16)
  leader           String             @db.VarChar(128)
  license          String             @db.VarChar(64)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  deleted_at       DateTime?          @db.DateTime(0)
  company_document company_document[]
  company_facility company_facility[]
  company_gallery  company_gallery[]
  information      information[]
  registration     registration[]
  suggestion_box   suggestion_box[]
  user_account     user_account[]
  user_facility    user_facility[]
  user_payment     user_payment[]
}

model company_document {
  id                    String                  @id @db.VarChar(36)
  company_id            String                  @db.VarChar(36)
  name                  String                  @db.VarChar(128)
  created_at            DateTime                @default(now()) @db.DateTime(0)
  updated_at            DateTime                @default(now()) @db.DateTime(0)
  deleted_at            DateTime?               @db.DateTime(0)
  company               company                 @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "company_document_ibfk_1")
  company_document_year company_document_year[]
  user_document         user_document[]

  @@index([company_id], map: "company_id")
}

model company_facility {
  id         String    @id @db.VarChar(36)
  company_id String    @db.VarChar(36)
  name       String    @db.VarChar(128)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  company    company   @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "company_facility_ibfk_1")

  @@index([company_id], map: "company_id")
}

model company_gallery {
  id         String    @id @db.VarChar(36)
  company_id String    @db.VarChar(36)
  photo      String    @db.VarChar(48)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  company    company   @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "company_gallery_ibfk_1")

  @@index([company_id], map: "company_id")
}

model information {
  id              String       @id @db.VarChar(36)
  title           String       @db.VarChar(256)
  description     String       @db.Text
  user_account_id String       @db.VarChar(36)
  company_id      String       @db.VarChar(36)
  created_at      DateTime     @default(now()) @db.DateTime(0)
  updated_at      DateTime?    @default(now()) @db.DateTime(0)
  deleted_at      DateTime?    @db.DateTime(0)
  company         company      @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "information_ibfk_1")
  user_account    user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "information_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([user_account_id], map: "user_account_id")
}

model location_data {
  id              String       @id @db.VarChar(36)
  user_account_id String       @db.VarChar(36)
  latitude        String       @db.VarChar(36)
  longitude       String       @db.VarChar(36)
  created_at      DateTime     @default(now()) @db.DateTime(0)
  updated_at      DateTime     @default(now()) @db.DateTime(0)
  deleted_at      DateTime?    @db.DateTime(0)
  user_account    user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "location_data_ibfk_1")

  @@index([user_account_id], map: "user_account_id")
}

model registration {
  id              String              @id @db.VarChar(36)
  company_id      String              @db.VarChar(36)
  user_account_id String              @db.VarChar(36)
  status          registration_status @default(Registered)
  flight_id       Int?
  created_at      DateTime            @default(now()) @db.DateTime(0)
  updated_at      DateTime            @default(now()) @db.DateTime(0)
  deleted_at      DateTime?           @db.DateTime(0)
  company         company             @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "registration_ibfk_1")
  user_account    user_account        @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "registration_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([user_account_id], map: "user_account_id")
}

model suggestion_box {
  id              String       @id @db.VarChar(36)
  user_account_id String       @db.VarChar(36)
  company_id      String       @db.VarChar(36)
  description     String       @db.Text
  created_at      DateTime     @default(now()) @db.DateTime(0)
  updated_at      DateTime     @default(now()) @db.DateTime(0)
  deleted_at      DateTime?    @db.DateTime(0)
  user_account    user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "suggestion_box_ibfk_1")
  company         company      @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "suggestion_box_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([user_account_id], map: "user_account_id")
}

model test {
  id         String   @id @db.VarChar(36)
  name       String   @db.VarChar(128)
  address    String   @db.VarChar(256)
  birthyear  Int
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model tracking_status {
  id              String       @id @db.VarChar(36)
  user_account_id String       @unique(map: "user_account_id") @db.VarChar(36)
  is_urgent       Boolean      @default(false)
  created_at      DateTime     @default(now()) @db.DateTime(0)
  updated_at      DateTime     @default(now()) @db.DateTime(0)
  deleted_at      DateTime?    @db.DateTime(0)
  user_account    user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "tracking_status_ibfk_1")
}

model user_account {
  id              String            @id @db.VarChar(36)
  username        String            @unique(map: "email") @db.VarChar(72)
  password        String            @db.VarChar(64)
  phone_number    String            @db.VarChar(16)
  role            user_account_role @default(User)
  company_id      String?           @db.VarChar(36)
  created_at      DateTime          @default(now()) @db.DateTime(0)
  updated_at      DateTime          @default(now()) @db.DateTime(0)
  deleted_at      DateTime?         @db.DateTime(0)
  information     information[]
  location_data   location_data[]
  registration    registration[]
  suggestion_box  suggestion_box[]
  tracking_status tracking_status?
  company         company?          @relation(fields: [company_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_account_ibfk_1")
  user_document   user_document[]
  user_facility   user_facility[]
  user_payment    user_payment[]
  user_profile    user_profile[]

  @@index([company_id], map: "company_id")
}

model user_document {
  id                  String           @id @db.VarChar(36)
  company_document_id String           @db.VarChar(36)
  user_account_id     String           @db.VarChar(36)
  file                String           @db.VarChar(48)
  created_at          DateTime         @default(now()) @db.DateTime(0)
  updated_at          DateTime         @default(now()) @db.DateTime(0)
  deleted_at          DateTime?        @db.DateTime(0)
  company             company_document @relation(fields: [company_document_id], references: [id], onUpdate: Restrict, map: "user_document_ibfk_1")
  user_account        user_account     @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "user_document_ibfk_2")

  @@index([company_document_id], map: "company_document_id")
  @@index([user_account_id], map: "user_account_id")
}

model user_facility {
  id                  String       @id @db.VarChar(36)
  company_facility_id String       @db.VarChar(36)
  user_account_id     String       @db.VarChar(36)
  created_at          DateTime     @default(now()) @db.DateTime(0)
  updated_at          DateTime     @default(now()) @db.DateTime(0)
  deleted_at          DateTime?    @db.DateTime(0)
  company             company      @relation(fields: [company_facility_id], references: [id], onUpdate: Restrict, map: "user_facility_ibfk_1")
  user_account        user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "user_facility_ibfk_2")

  @@index([company_facility_id], map: "company_facility_id")
  @@index([user_account_id], map: "user_account_id")
}

model user_payment {
  id               String       @id @db.VarChar(36)
  company_id       String       @db.VarChar(36)
  user_account_id  String       @db.VarChar(36)
  amount           Int
  note             String?      @db.Text
  proof_file       String?      @db.VarChar(48)
  recipient        String       @db.VarChar(64)
  is_validated     Boolean      @default(false)
  transaction_date DateTime     @default(now()) @db.Date
  created_at       DateTime     @default(now()) @db.DateTime(0)
  updated_at       DateTime     @default(now()) @db.DateTime(0)
  deleted_at       DateTime?    @db.DateTime(0)
  user_account     user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "user_payment_ibfk_1")
  company          company      @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "user_payment_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([user_account_id], map: "user_account_id")
}

model user_profile {
  id                    String       @id @db.VarChar(36)
  user_account_id       String       @db.VarChar(36)
  departure_year        Int
  reg_number            String?      @db.VarChar(32)
  portion_number        String       @db.VarChar(32)
  bank                  String       @db.VarChar(32)
  bank_branch           String?      @db.VarChar(32)
  name                  String       @db.VarChar(128)
  nasab_name            String       @db.VarChar(128)
  gender                String       @db.VarChar(16)
  marital_status        String?      @db.VarChar(16)
  blood_type            String?      @db.VarChar(3)
  pob                   String       @db.VarChar(64)
  dob                   DateTime     @db.Date
  street                String       @db.VarChar(128)
  postal_code           Int
  subdistrict           String       @db.VarChar(64)
  district              String       @db.VarChar(64)
  city                  String       @db.VarChar(64)
  province              String       @db.VarChar(64)
  education             String?      @db.VarChar(32)
  job                   String?      @db.VarChar(64)
  passport_number       String       @db.VarChar(16)
  passport_name         String       @db.VarChar(128)
  passport_pob          String       @db.VarChar(64)
  passport_dob          DateTime     @db.Date
  passport_issue_date   DateTime     @db.Date
  passport_expiry_date  DateTime     @db.Date
  passport_issue_office String       @db.VarChar(64)
  passport_endorsement  String?      @db.VarChar(128)
  identity_number       String       @db.VarChar(16)
  created_at            DateTime     @default(now()) @db.DateTime(0)
  updated_at            DateTime     @default(now()) @db.DateTime(0)
  deleted_at            DateTime?    @db.DateTime(0)
  user_account          user_account @relation(fields: [user_account_id], references: [id], onUpdate: Restrict, map: "user_profile_ibfk_1")

  @@index([user_account_id], map: "user_account_id")
}

model company_document_year {
  id                  String           @id @db.VarChar(36)
  company_document_id String           @db.VarChar(46)
  year                String           @default("ALL") @db.VarChar(4)
  created_at          DateTime         @default(now()) @db.DateTime(0)
  updated_at          DateTime         @default(now()) @db.DateTime(0)
  deleted_at          DateTime?        @db.DateTime(0)
  company_document    company_document @relation(fields: [company_document_id], references: [id], onUpdate: Restrict, map: "company_document_year_ibfk_1")

  @@index([company_document_id], map: "company_document_year_ibfk_1")
}

enum registration_status {
  Accepted
  Rejected
  Processed
  Registered
}

enum user_account_role {
  Superadmin
  Admin
  User
}
